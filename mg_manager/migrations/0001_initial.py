# Generated by Django 2.1.1 on 2018-12-19 18:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DatasetHard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('df_name', models.CharField(max_length=200, unique=True)),
                ('df_description', models.CharField(default='Empty', max_length=2000)),
                ('comes_from', models.CharField(default='Internal', max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='DatasetSoft',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('df_description', models.CharField(default='Empty', max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library_name', models.CharField(max_length=200, unique=True)),
                ('date_of_preparation', models.DateField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='MetaSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('schema', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='MgFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strand', models.CharField(choices=[('R1', 'R1'), ('R2', 'R2'), ('S', 'S')], default='S', max_length=3)),
                ('orig_file_location', models.CharField(blank=True, max_length=1024)),
                ('import_success', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MgSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('name_on_fs', models.CharField(blank=True, max_length=200)),
                ('dataset_hard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='mg_manager.DatasetHard')),
                ('library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mg_manager.Library')),
            ],
        ),
        migrations.CreateModel(
            name='MgSampleFileContainer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preprocessing', models.CharField(max_length=512)),
                ('mg_sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='mg_manager.MgSample')),
            ],
        ),
        migrations.CreateModel(
            name='Mp2Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('params', models.CharField(max_length=10)),
                ('report', models.FileField(blank=True, null=True, upload_to=None)),
                ('mg_container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mg_manager.MgSampleFileContainer')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bp', models.IntegerField()),
                ('reads', models.IntegerField()),
                ('file_type', models.CharField(max_length=128)),
                ('encoding', models.CharField(max_length=128)),
                ('sequence_length', models.CharField(max_length=128)),
                ('per_tile_sequence_quality', models.CharField(blank=True, max_length=128, null=True)),
                ('basic_statistics', models.CharField(max_length=10)),
                ('per_base_sequence_quality', models.CharField(max_length=10)),
                ('per_sequence_quality_scores', models.CharField(max_length=10)),
                ('per_base_sequence_content', models.CharField(max_length=10)),
                ('per_sequence_gc_content', models.CharField(max_length=10)),
                ('per_base_n_content', models.CharField(max_length=10)),
                ('sequence_length_distribution', models.CharField(max_length=10)),
                ('sequence_duplication_levels', models.CharField(max_length=10)),
                ('overrepresented_sequences', models.CharField(max_length=10)),
                ('adapter_content', models.CharField(max_length=10)),
                ('sequences_flagged_as_poor_quality', models.IntegerField(max_length=10)),
                ('adapter_content_img', models.ImageField(blank=True, null=True, upload_to=None)),
                ('duplication_levels_img', models.ImageField(blank=True, null=True, upload_to=None)),
                ('per_base_n_content_img', models.ImageField(blank=True, null=True, upload_to=None)),
                ('per_base_quality_img', models.ImageField(blank=True, null=True, upload_to=None)),
                ('per_base_sequence_content_img', models.ImageField(blank=True, null=True, upload_to=None)),
                ('per_sequence_gc_content_img', models.ImageField(blank=True, null=True, upload_to=None)),
                ('per_sequence_quality_img', models.ImageField(blank=True, null=True, upload_to=None)),
                ('sequence_length_distribution_img', models.ImageField(blank=True, null=True, upload_to=None)),
                ('mg_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='mg_manager.MgFile', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='RealSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('date_of_collection', models.DateField(blank=True, null=True)),
                ('time_point', models.PositiveIntegerField(blank=True, null=True)),
                ('meta_info', models.TextField(blank=True)),
                ('meta_schema', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mg_manager.MetaSchema')),
            ],
        ),
        migrations.CreateModel(
            name='SampleSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('meta_info', models.TextField(blank=True)),
                ('ids', models.TextField(blank=True)),
                ('meta_schema', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mg_manager.MetaSchema')),
            ],
        ),
        migrations.CreateModel(
            name='SequencingRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(max_length=32, unique=True)),
                ('platform', models.CharField(max_length=200)),
                ('date_of_run', models.DateField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.AddField(
            model_name='realsample',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='real_samples', to='mg_manager.SampleSource'),
        ),
        migrations.AddField(
            model_name='mgsample',
            name='real_sample',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mg_samples', to='mg_manager.RealSample'),
        ),
        migrations.AddField(
            model_name='mgsample',
            name='sequencing_run',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mg_manager.SequencingRun'),
        ),
        migrations.AddField(
            model_name='mgsample',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mg_manager.SampleSource'),
        ),
        migrations.AddField(
            model_name='mgfile',
            name='container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='mg_manager.MgSampleFileContainer'),
        ),
        migrations.AddField(
            model_name='datasetsoft',
            name='dataset_soft',
            field=models.ManyToManyField(blank=True, to='mg_manager.MgSample'),
        ),
        migrations.AlterUniqueTogether(
            name='realsample',
            unique_together={('source', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='mgsample',
            unique_together={('dataset_hard', 'name_on_fs', 'library', 'sequencing_run')},
        ),
    ]
